@import "./initor.scss";  
@import "./scroll.scss";  
@import "./flex.scss";

.box-normal {                           //标准盒模型
    -webkit-box-sizing: content-box;
    -moz-box-sizing: content-box;
    box-sizing: content-box;
}

.fixed {                                //fixed 定位
    position: fixed;
}
 
.relative {                             //相对定位
    position: relative;
}

.absolute {                             //绝对定位
    position: absolute;
}

.container {                            //版心
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;

    &[md]{
        max-width: 960px; 
    }
    &[sm]{
        max-width: 736px;
    }
}

.max-w{                                 //满宽
    width: 100%;
}

.max-h{                                 //满高
    height: 100%;
}

.max{                                   //满屏
    @extend .max-w;
    @extend .max-h;
}

.max-screen{                            //满屏
    @extend .fixed;
    @extend .max;
    @extend .no-scroll;
    left: 0;
    top: 0;
}


//生成不同尺寸宽度及高度
@mixin auto_size(){
    .w-0 {
        width: 0;
    }
    .h-0 {
        height: 0;
    }
    .w-d5 {
        width: .5rem;
    }
    .h-d5 {
        height: .5rem;
    }
    @for $i from 1 to 11{
        .w-#{$i} {
            width: #{$i}rem;
        }
        .h-#{$i} {
            height: #{$i}rem;
        }
    }
    $vals: (15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100);
    @each $val in $vals{
        .w-#{$val} {
            width: #{$val}rem;
        }
        .h-#{$val} {
            height: #{$val}rem;
        }
    }
}
@include auto_size();


//生成内、外边距
@mixin auto_gen_space_class(){ 
    $dirs: (-t top), (-r right), (-l left), (-b bottom), (-v v), (-h h), ("" all); 
    $vals: (d5 .5), (1 1), (1d5 1.5), (2 2), (2d5 2.5), (3 3), (3d5 3.5), (4 4), (5 5), (6 6), (7 7), (8 8), (9 9), (10 10);

    @for $i from 1 to length($dirs) + 1{
        $dir: nth($dirs, $i);
        @each $val in $vals{
            .pad#{nth($dir, 1)}-#{nth($val, 1)} {
                @include set_space(padding, #{nth($val, 2)}rem, nth($dir, 2));
            }
            .mrg#{nth($dir, 1)}-#{nth($val, 1)} {
                @include set_space(margin, #{nth($val, 2)}rem, nth($dir, 2));
            }
        }
    }
} 
@include auto_gen_space_class();   


//生成 z 轴层级
@mixin auto_gen_z_index(){ 
    .z-1 {
        z-index: -1;
    }
    @for $i from 0 to 11{
        .z#{$i} {
            z-index: $i;
        }
    }
}
@include auto_gen_z_index();


//生成放缩比率
@mixin auto_gen_scale(){
    .scale-0 {
        transform: scale(0);
    }
    @for $i from 1 to 10{
        .scale-d#{$i} {
            transform: scale($i / 10);
        }
    }
    @for $i from 1 to 10{
        .scale-1d#{$i} {
            transform: scale($i / 10 + 1);
        }
    }
    @for $i from 2 to 11{
        .scale-#{$i} {
            transform: scale($i);
        }
    }
}
@include auto_gen_scale();


//生成微调位移
@mixin auto_gen_offset(){
    $dirs: (l left), (r right), (t top), (b bottom); 
    @for $i from 0 to 12{
        @each $dir in $dirs{
            @if $i == 0{
                .#{nth($dir, 1)}#{$i} {
                    #{nth($dir, 2)}: #{$i};
                }
            }@else {
                .#{nth($dir, 1)}#{$i} {
                    #{nth($dir, 2)}: #{$i}px;
                }
                .#{nth($dir, 1)}-#{$i} {
                    #{nth($dir, 2)}: -#{$i}px;
                }
    
                //成倍位移
                @if $i != 11{
                    .#{nth($dir, 1)}x#{$i} {
                        #{nth($dir, 2)}: #{$i}rem;
                    }
                    .#{nth($dir, 1)}x-#{$i} {
                        #{nth($dir, 2)}: -#{$i}rem;
                    }
                }
            }   
        }
    }
}
@include auto_gen_offset();

 
//生成基于元素自身宽高的位移
@mixin auto_gen_offset_by_self(){
    $l:'(';
    $r:')';
    $dirs: (l translateX), (r translateX), (t translateY), (b translateY);
    @for $i from 1 to 11{
        @each $dir in $dirs{
            .#{nth($dir, 1)}p#{$i * 10} {
                transform: #{nth($dir, 2)}#{$l}($i * 10)%#{$r};
            } 
            .#{nth($dir, 1)}p-#{$i * 10} {
                transform: #{nth($dir, 2)}#{$l}-($i * 10)%#{$r};
            }
            @if $i == 2{
                .#{nth($dir, 1)}p200 {
                    transform: #{nth($dir, 2)}#{$l}200%#{$r};
                } 
                .#{nth($dir, 1)}p-200 {
                    transform: #{nth($dir, 2)}#{$l}-200%#{$r};
                }
            }
        }
    }
}
@include auto_gen_offset_by_self();

